#!/usr/bin/env ruby

require 'subcommand'
require 'vimremote'

def parse_opt()
  include Subcommands
  options = {}

  global_options do |opts|
    opts.banner = "Usage: #{__FILE__} [options] [subcommand [options]]"
    opts.description = "control vim remote server with useful commands"

    opts.separator ""
    opts.separator "Global options are:"

    opts.on("-s SERVER", "--server SERVER", "server name") do |v|
      options[:servername] = v
    end

    opts.on("-v", "--[no-]verbose", "Run verbosely") do |v|
      options[:verbose] = v
    end

    # opts.on("-q", "--[no-]quiet", "quietly run ") do |v|
    #   options[:quiet] = v
    # end

  end

  command :diff do |opts|
    opts.banner = "Usage: diff [options]"
    opts.description = "diff two files"
    opts.on("-f", "--[no-]force", "force") do |v|
      options[:force] = v
    end
  end

  command :command do |opts|
    opts.banner = "Usage: command [options]"
    opts.description = "execute vim command"
  end

  command :merge do |opts|
    opts.banner = "Usage: merge [options]"
    opts.description =
      '$LOCAL(= mine) $MERGED(= yours) '\
      '$REMOTE(= merged output) [$BASE(= common parent)]'
  end

  # alias_command :diff!, 'diff', '--force'

  options[:subcommand] = opt_parse()
  options[:argv] = ARGV

  return options
end






if RUBY_VERSION < "1.9"
  puts "rubu version 1.9+ is required!"
  exit(1)
end
options = parse_opt()

vr = VimRemote.new(options)

do_method = 'do_' + options[:subcommand]
begin
  vr.send(do_method)
rescue NoMethodError
  puts "#{do_method} has not implemented!"
end



# ~~ modeline  ~~ [[[1 -------------------------------------------------------
# vim: set ft=ruby ts=2 sw=2 tw=78 fdm=syntax fmr=[[[,]]] fdl=1 :


